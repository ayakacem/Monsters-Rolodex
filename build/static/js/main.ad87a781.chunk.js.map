{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","handlechange","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,UAAUC,IAAK,yBAA2BH,EAAMI,QAAQC,GAAK,2BACtE,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,G,MAAS,SAAAR,GAAK,OAExB,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCL3CM,G,MAAU,SAACX,GAAD,OACnB,uBACAC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,iBCuCLC,G,wDAxCb,aAAc,IAAD,8BACX,gBAYFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,QAAO,kBAAIC,QAAQC,IAAI,EAAKC,WAXhE,EAAKA,MAAM,CACThB,SAAS,GAGTW,YAAY,IAPH,E,qDAUb,WAAoB,IAAD,OACjBM,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACV,SAASqB,S,oBAK1H,WACE,MAAgCC,KAAKN,MAA7BhB,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZY,EAAiBvB,EAASwB,QAAO,SAAA7B,GAAO,OAAEA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAGhG,OACE,sBAAKjC,UAAU,MAAf,UACE,kDAEF,cAAC,EAAD,CACEY,YAAY,kBACZE,aAAcgB,KAAKd,eAEnB,cAAC,EAAD,CAAUR,SAAUuB,W,GA9BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad87a781.chunk.js","sourcesContent":["import React from'react';\r\nimport './card.styles.css';\r\nexport const Card = props=>(\r\n    <div className='card-container'>\r\n       \r\n        <img alt=\"monster\" src={'https://robohash.org/$' + props.monster.id + '?set=set2&size=180x180'}/> \r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from'../card/card.component';\r\nimport './card-list.styles.css';\r\nexport const CardList=props=> (\r\n  \r\n   <div className='card-list'>\r\n         {\r\n       props.monsters.map(monster =>(<Card key={monster.id} monster={monster}/>))\r\n     }\r\n    </div>\r\n\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\nexport const SearchBox=(props) => (\r\n    <input\r\n    className='search'\r\n    type='search'\r\n    placeholder={props.placeholder}\r\n    onChange={props.handleChange}/>\r\n);\r\n\r\n","import React ,{Component} from 'react';\nimport{CardList} from'./components/card-list/card-list.component.jsx';\nimport{SearchBox} from'./components/search-box/search-box.component.jsx';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[\n       \n      ],\n      searchField:''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({monsters:users}));\n  }\n  handlechange = e => {\n    this.setState({searchField:e.target.value},()=>console.log(this.state))\n  }\n  render(){\n    const { monsters, searchField }=this.state;\n    const filteredMonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()) \n    );\n   \n    return(\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        \n      <SearchBox \n        placeholder='search monsters'\n        handleChange={this.handlechange}\n        />\n        <CardList monsters={filteredMonsters}/>\n          \n    \n     \n    </div>\n\n);\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}